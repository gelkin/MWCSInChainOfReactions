breedthreads = auto
evalthreads = auto

state		= ec.simple.SimpleEvolutionState

pop		    = ec.Population
init		= ec.simple.SimpleInitializer
finish		= ec.simple.SimpleFinisher
breed       = ec.multiobjective.nsga2.NSGA2Breeder
eval        = ec.multiobjective.nsga2.NSGA2Evaluator
exch		= ec.simple.SimpleExchanger

# Multi-objective: <number of connected components, total weight>
pop.subpop.0.species.fitness = ec.multiobjective.nsga2.NSGA2MultiObjectiveFitness
pop.subpop.0.species.fitness.num-objectives = 2

pop.subpop.0.species.fitness.maximize.0 = false
pop.subpop.0.species.fitness.maximize.1 = true

# Statistics
stat = ec.multiobjective.MultiObjectiveStatistics
stat.front = $./src/main/resources/front.stat
stat.file  = $./src/main/resources/mwcs-multi.stat

generations = 100

quit-on-run-complete	= true
checkpoint		    = false
checkpoint-prefix	= ec
checkpoint-modulo	= 1

pop.subpops		= 1
pop.subpop.0	= ec.Subpopulation

pop.subpop.0.size = 50

pop.subpop.0.duplicate-retries 	= 0

pop.subpop.0.species		= ec.vector.BitVectorSpecies
pop.subpop.0.species.ind	= ru.ifmo.ctddev.mazin.MWCSInChainOfReactions.GraphIndividual

pop.subpop.0.species.genome-size	= genome-size-from-file

# ATTENTION! If GraphIndividual is specified, then 'one'-crossover means special
# ATTENTION! graph-crossover (for confirmation, look through GraphIndividual class)
pop.subpop.0.species.crossover-type	= one
pop.subpop.0.species.mutation-type	= flip
pop.subpop.0.species.mutation-prob	= 0.005

# Use custom mutation class
pop.subpop.0.species.pipe = ru.ifmo.ctddev.mazin.MWCSInChainOfReactions.GraphMutatorPipeline
pop.subpop.0.species.pipe.source.0	= ec.vector.breed.VectorCrossoverPipeline

# Selection
pop.subpop.0.species.pipe.source.0.source.0	= ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1	= ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.0.size	= 2
pop.subpop.0.species.pipe.source.0.source.1.size	= 2

eval.problem            = ru.ifmo.ctddev.mazin.MWCSInChainOfReactions.MWCGProblem